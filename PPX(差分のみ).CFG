PPxCFG	= 1.52

MC_celS	= {	; エントリ表示 書式([;]メニュー)
GrepN	= wf30
default	= N wF9,5 zK7 S1 T14 s1
}
;==========================================================================
;・エイリアス
;==========================================================================
A_exec	= {	; エイリアス
GitExtensions	= E:\tool\Developer\GitExtensions\GitExtensions.exe
gvim	= E:\tool\editor\vim80-kaoriya-win64\gvim.exe
vim	= E:\tool\editor\vim80-kaoriya-win64\vim.exe
ruby	= ruby --disable=gems
}
;==========================================================================
;・ファイル判別
;
; 指定方法     判別方法 , コマンドライン
; 判別方法  1)拡張子判別      拡張子名
;           2)ファイル名判別  ファイル名.[拡張子名]
;           3)種別判別        ファイル種別名
;           4)全指定          *
;   E_xxx(xxxは任意)で任意のファイル判別を追加できる
;==========================================================================
E_cr	= {	; [Enter]用判別
:SHEBANG_RUBY	,%OB ruby %FC
}
E_cscr	= {	; ^\[Enter]用判別(カスタム)
*	,%Orib notepad %FDC
}
;======================================
;・ユーザ定義内容判別
;
; 指定方法 : 定義するファイル種別名 = オフセット,文字列(\xHH…16進数HH)[,…]
; 例) :type = H1a,HEADer,100,Hr
;    オフセット0x1a に"HEADer" 且つ オフセット100 に"Hr"がある場合、:type
; 例) :type = 0-100,HEADer ; オフセット0～100 に"HEADer"がある場合、:type
;======================================
X_uftyp	= { 
:SHEBANG_RUBY	= 0,#!/usr/bin/env ruby
}
;==========================================================================
;・メニュー
;
; 指定方法     表示用内容 = 具体内容
;   表示用内容:ポップアップメニューに表示する内容。
;              &を付けた部分がショートカット(下線)
;              "\t"とするとタブ区切りになる
;              ここが英数字１文字(X)なら"&X 具体内容"形式で表示される
;              "--"とすると区切り線になる(具体内容は無視)
;              "||"とすると新しい桁になる(具体内容は無視)
;   M_xxx(xxxは任意)で任意のメニューを追加できる
;==========================================================================
M_menuCustomGit1	= {	** comment **
エントリーへの操作	= 
------------------	= 
git &add <FC>	= %Obsq git add %#
git &add -p <FC>	= %OBrsq git add -p %FC
git &blame <FC>(GitExtensions)	= %Ob %'GitExtensions' blame %FDC
git check&out <FC> <Q>	= 
	%"git checkout %FC(Enterで実行1/2)"%{%}
	%"git checkout %FC(Enterで実行2/2)"%{%}
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	%Obsq cat %'ENTRY_FILE' | nkf -Lu -w | xargs git checkout
git check&out --ours <FC> <Q>	= 
	%"git checkout --ours %FC(Enterで実行1/2)"%{%}
	%"git checkout --ours %FC(Enterで実行2/2)"%{%}
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	%Obsq cat %'ENTRY_FILE' | nkf -Lu -w | xargs git checkout --ours
git check&out --theirs <FC> <Q>	= 
	%"git checkout --theirs %FC(Enterで実行1/2)"%{%}
	%"git checkout --theirs %FC(Enterで実行2/2)"%{%}
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	%Obsq cat %'ENTRY_FILE' | nkf -Lu -w | xargs git checkout --theirs
git diff&tool -t winmerge <FC>	= %Obrsq git difftool -t winmerge -y %FC
git merge&tool -t winmerge <FC>	= %Obrsq git mergetool -t winmerge -y %FC
git &reset HEAD <FC>	= %OBsq git reset HEAD %#
git r&m -r <FC> <Q>	= 
	%"git rm -r %FC(Enterで実行1/2)"%{%}
	%"git rm -r %FC(Enterで実行2/2)"%{%}
	%OBsq git rm -r %#
git m&v <FC> <moved>	= %OBrsq git mv %FC %"git mv src -> dst"%{new_name%}
}
M_menuCustomGit2	= {	** comment **
エントリー以外への操作	= 
----------------------	= 
git &status | gitst2listfile > listfile	= 
	*set LSTFILE=%'temp'\gitstlistfile.tmp
	%Obsq git status | gitst2listfile > %'LSTFILE'
	*jumppath %'LSTFILE'
open &GitExtensions	= %Ob %'GitExtensions' browse %*script(%0\script\exec.js, "git rev-parse --show-toplevel")
--	= 
git &branch <command>	= 
	*set ARG=%"git branch [-m|-d|-D] <branchname>(入力1/2)"%{%}
	%"git branch [-m|-d|-D] <branchname>(Enterで実行2/2)"%{%}
	%OB git branch %'ARG'
git check&out <target>	= 
	*set ENTRY=%*script(%0\script\entry.js)
	*set ARG=%"git checkout <target>(入力1/2)"%{%'ENTRY'%}
	%"git checkout <target>(Enterで実行2/2)"%{%}
	%OB git checkout %'ARG'
git check&out <branch> <PECO>	= %OB git branch | peco | xargs git checkout
git cherry-&pick <target>	= %OBsq git cherry-pick %"git cherry-pick <target>"%{target%}
git &commit	= %Ob git commit
git &commit --amend	= %Ob git commit --amend
git &commit --fixup'='<target>[~<N>]	= 
	*set CURRENT=%*script(%0\script\exec.js, "git branch-name")
	%OB git commit --fixup=%"git --fixup=<target>"%{%'CURRENT'~%|1%|%}
git flo&w feature start <command>	= %OB git flow feature start %"git flow feature start <branch>"%{hoge_branch%}
git flo&w feature publish <command>	= %OB git flow feature publish %"git flow feature publish <branch>"%{hoge_branch%}
git &tag -a <tagname>	= %OB git tag -a %"git tag -a <tagname>"%{newtag%}
git r&ebase <upstream> [<branch>]	= 
	*set dummy='よく対象になる最新ブランチをセットしておく'
	*set LATEST=%*script(%0\script\exec.js, "git branch-latest")
	%OB git rebase %"git rebase <upstream> [<branch>]"%{%'LATEST'%}
git r&ebase --onto <newbase> <upstream> <branch>	= 
	*set LATEST=%*script(%0\script\exec.js, "git branch-latest")
	%OB git rebase --onto %"git rebase --onto <newbase> <upstream> <branch>"%{%'LATEST'%}
git r&ebase -i HEAD~<N>	= %OB git rebase -i HEAD~%"git rebase -i HEAD~<N>"%{2%}
git r&ebase -i --autosquash HEAD~<N>	= %OB git rebase -i --autosquash HEAD~%"git rebase -i --autosquash HEAD~<N>"%{2%}
git &reset <target>[~<N>]	= 
	*set CURRENT=%*script(%0\script\exec.js, "git branch-name")
	%OB git reset %"git reset <target>"%{%'CURRENT'~%|1%|%}
git &reset HEAD~<N>	= %OB git reset HEAD~%"git reset HEAD~<N>"%{1%}
git m&erge [--no-ff] <commit>	= 
	*set dummy='よく対象になる最新ブランチをセットしておく'
	*set LATEST=%*script(%0\script\exec.js, "git branch-latest")
	%OB git merge %"git merge <commit>"%{--no-ff %|%'LATEST'%|%}
--	= 
git &delete-merged-branches <Q>	= 
	%"git delete-merged-branches(Enterで実行1/2)"%{%}
	%"git delete-merged-branches(Enterで実行2/2)"%{%}
	%OB git delete-merged-branches
git &fetch --prune	= %OB git fetch --prune
git &fetch	= %OB git fetch
git p&ush <command>	= %Obsq git push %"git push <branch>"%{origin %|master%|%}
}
M_menuCustomGrep	= {	** comment **
grep -&l(ascii | utf8)(一致ファイル検索)	= 
	*set dummy='エントリへのgrep -l'
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*set SEARCH_LSTFILE=%'temp'\searchlistfile.tmp
	*set ARG=%"xargs grep -lオプション(-i:大小無視,-E:拡張正規表現,-w:単語単位,-L:以外)"%{-i -E "%|word%|"%}
	*set CMD=xargs grep -l %'ARG'
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	*script %0\script\backuplistfile.js, %'SEARCH_LSTFILE'
	%Obsq cat %'ENTRY_FILE' | nkf -Lu -w | %'CMD' | %'ruby' %0\script\shell\tolistfile.rb ';MySearch=%'CMD'' | nkf -Lw -s > %'SEARCH_LSTFILE'
	*jumppath %'SEARCH_LSTFILE'
jvgrep -&l(日本語)(一致ファイル検索)	= 
	*set dummy='エントリへのjvgrep -l'
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*set SEARCH_LSTFILE=%'temp'\searchlistfile.tmp
	*set ARG=%"xargs jvgrep -lオプション"%{"%|word%|"%}
	*set CMD=xargs jvgrep -8 -r --no-color -l %'ARG'
	*set LAWK=gawk '{gsub(/\\\\/, "/", $0); print "./" $0;}'
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	*script %0\script\backuplistfile.js, %'SEARCH_LSTFILE'
	%Obsq cat %'ENTRY_FILE' | nkf -Lu -w | %'CMD' | %'LAWK' | %'ruby' %0\script\shell\tolistfile.rb ';MySearch=%'CMD'' | nkf -Lw -s > %'SEARCH_LSTFILE'
	*jumppath %'SEARCH_LSTFILE'
grep -&n(ascii | utf8)(一致行検索)	= 
	*set dummy='エントリへのgrep -nH'
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*set SEARCH_LSTFILE=%'temp'\searchlistfile.tmp
	*set ARG=%"xargs grep -nH --textオプション(-i:大小無視,-E:拡張正規表現,-w:単語単位,-v:以外)"%{-i -E "%|word%|"%}
	*set CMD=xargs grep -nH --text %'ARG'
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	*script %0\script\backuplistfile.js, %'SEARCH_LSTFILE'
	%Obsq cat %'ENTRY_FILE' | nkf -Lu -w | %'CMD' | %'ruby' %0\script\shell\tolistfilegrepn.rb ';MySearch=%'CMD'' | nkf -Lw -s > %'SEARCH_LSTFILE'
	*jumppath %'SEARCH_LSTFILE'
	*set dummy='loadevent.js'と設定を合わせる
	*viewstyle -temp GrepN
jvgrep -&n(日本語)(一致行検索)	= 
	*set dummy='エントリへのjvgrep -n'
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*set SEARCH_LSTFILE=%'temp'\searchlistfile.tmp
	*set ARG=%"xargs jvgrepオプション(-v:以外)"%{"%|word%|"%}
	*set CMD=xargs jvgrep -8 -r --no-color -n %'ARG'
	*set NAWK=gawk '{idx=index($0, ":"); path=substr($0, 0, idx-1); str=substr($0, idx); gsub(/\\\\/, "/", path); print "./" path str;}'
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	*script %0\script\backuplistfile.js, %'SEARCH_LSTFILE'
	%Obsq cat %'ENTRY_FILE' | nkf -Lu -w | %'CMD' | %'NAWK' | %'ruby' %0\script\shell\tolistfile.rb ';MySearch=%'CMD'' | nkf -Lw -s > %'SEARCH_LSTFILE'
	*jumppath %'SEARCH_LSTFILE'
	*set dummy='loadevent.js'と設定を合わせる
	*viewstyle -temp GrepN
grep entry &string(エントリ文字列の検索)	= 
	*set dummy='エントリ文字列へのgrep'
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*set SEARCH_LSTFILE=%'temp'\searchlistfile.tmp
	*set ARG=%"grep --textオプション(-i:大小無視,-E:拡張正規表現,-w:単語単位,-v:以外)"%{-i -E "%|word%|"%}
	*set CMD=grep --text %'ARG'
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	*script %0\script\backuplistfile.js, %'SEARCH_LSTFILE'
	%Obsq cat %'ENTRY_FILE' | nkf -Lu -w | %'CMD' | %'ruby' %0\script\shell\tolistfile.rb ';MySearch=%'CMD'' | nkf -Lw -s > %'SEARCH_LSTFILE'
	*jumppath %'SEARCH_LSTFILE'
}
M_menuCustomReplace	= {	** comment **
&sed([行]s/src/dst/g)(ファイル、行単位自動判別)	= 
	*sedcmd
	%OBsq cat %'ENTRY_FILE' | nkf -Lu -w | %'ruby' %0\script\shell\sed.rb "%'SEDARG_FILE'" "%'SEDF_FILE'"
sed &test([行]s/src/dst/g)(ファイル、行単位自動判別)	= 
	*sedcmd
	%OBsq cat %'ENTRY_FILE' | nkf -Lu -w | %'ruby' %0\script\shell\sedtest.rb "%'SEDARG_FILE'" "%'SEDF_FILE'"
&nkf	= 
	*set dummy='エントリへのnkf'
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*set ARG=%"nkfオプション(-w:utf8,-s:Shift_JIS,-Lu:LF,-Lw:CRLF)"%{-%|w%|%}
	*set CMD=%'ruby' -ne "cmd='nkf %'ARG' --overwrite '+$_; puts '$ '+cmd; system cmd"
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	%OBsq cat %'ENTRY_FILE' | nkf -Lu -w | %'CMD'
}
;==========================================================================
;・キー割り当て
;	付記がない限り、キー指定／コマンド指定のいずれも可
;** キー指定
;  割当て先キー名称 = 割り当てるキー名称
;
;** コマンド指定
;  割当て先キー名称,コマンドライン
;==========================================================================
KC_main	= {	; PPcメイン窓
^\ENTER	,*execute ,%%ME_cscr,%C
LOADEVENT	,*script %0\script\loadevent.js
^\RIGHT	,
	*set SEARCH_LSTFILE=%'temp'\searchlistfile.tmp
	*script %0\script\nextlistfilehistory.js, %'SEARCH_LSTFILE'
^\LEFT	,
	*set SEARCH_LSTFILE=%'temp'\searchlistfile.tmp
	*script %0\script\prevlistfilehistory.js, %'SEARCH_LSTFILE'
^F	,
	*set dummy='エントリへのfind'
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*set SEARCH_LSTFILE=%'temp'\searchlistfile.tmp
	*set dummy='---検索内容の入力-------------'
	*set ARG=%"_findx entry... [オプション](-SEPname:;区切り、i付きで大小無視)"%{-SEPiname "%|*%|"%}
	*set EXTRACT_ARG=%*script(%0\script\findargparser.js, %'ARG')
	*set dummy='---コマンド内容---------------'
	*set OPT=\( -type d \( -name .git -o -name .svn \) -prune \( -wholename .git -wholename .svn \) -o -type f \)
	*set CMD_BAK=xargs -P4 -I'{}' find {} %'OPT' %'EXTRACT_ARG'
	*set CMD=findx - %'OPT' %'EXTRACT_ARG'
	*set dummy='---実行-----------------------'
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	*script %0\script\backuplistfile.js, %'SEARCH_LSTFILE'
	%Obsq cat %'ENTRY_FILE' | nkf -Lu -w | %'CMD' | %'ruby' %0\script\shell\tolistfile.rb ';MySearch=findx entry... %'ARG'' | nkf -Lw -s > %'SEARCH_LSTFILE'
	*jumppath %'SEARCH_LSTFILE'
^W	,%M_menuCustomGrep
^R	,%M_menuCustomReplace
^G	,%M_menuCustomGit1
\G	,%M_menuCustomGit2
^S	,
	*set dummy='エントリへのcommand実行'
	*set CMD_LSTFILE=%'temp'\cmdlistfile.tmp
	*set CMD=%"command <FC>"%{xargs%}
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	%Obsq cat %'ENTRY_FILE' | nkf -Lu -w | %'CMD' | %'ruby' %0\script\shell\tolistfile.rb | nkf -Lw -s > %'CMD_LSTFILE'
	*jumppath %'CMD_LSTFILE'
\S	,
	*set dummy='command実行'
	*set CMD_LSTFILE=%'temp'\cmdlistfile.tmp
	*set CMD=%"コマンド?"%{command%}
	%Obsq %'CMD' | %'ruby' %0\script\shell\tolistfile.rb | nkf -Lw -s > %'CMD_LSTFILE'
	*jumppath %'CMD_LSTFILE'
^\E	,*set VIM_ARGS=%*script(%0\script\entry2vimargs.js, "%FCD")
	%Ob %'gvim' %'VIM_ARGS'
\E	,
	*set VIM_ARGS=%*script(%0\script\entry2vimargs.js, "%FCD")
	%Ob %'gvim' --remote-tab-silent %'VIM_ARGS'
^\C	,
	*set dummy='エントリ文字列をコピー(ListFileでもフルパスにしない)'
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*script %0\script\entry2file.js, %'ENTRY_FILE'
	%Obnsq cat %'ENTRY_FILE' | nkf -Lw -s | clip
	*linemessage エントリ文字列をコピーしました
}
;==========================================================================
;・色の定義
;==========================================================================
C_ext	= {	; 拡張子色
UNTRACKED	= _DMAG
COMMITTED	= _GRE
NOTSTAGED	= H0000C0
UNMERGED	= _RED
}
;--------------------------------------------------------------------------
_Command	= {	; ユーザコマンド・関数
sedcmd	=
	*set dummy='エントリへのsed(ファイル、行単位自動判別)'
	*set ENTRY_FILE=%'temp'\entryfile.tmp
	*set SEDARG_FILE=%'temp'\sedargfile.tmp
	*set SEDF_FILE=%'temp'\sedffile.tmp
	*set dummy='---範囲編集-------------'
	*script %0\script\edit2file.js, %'SEDARG_FILE', "sedオプション([行]s/src/dest/g)", "%%|src%%|/"
	*set dummy='----------------'
	*script %0\script\entry2file.js, %'ENTRY_FILE'
}

